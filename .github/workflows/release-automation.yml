name: Release Automation

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  check-release:
    name: Check Release Requirements
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      release_type: ${{ steps.check.outputs.release_type }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec

      - name: Check for release
        id: check
        run: |
          # Check if this is a manual release
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "Manual release triggered: ${{ github.event.inputs.release_type }}"
            exit 0
          fi
          
          # For push events, check if there are releasable commits
          # This is a simplified check - in real implementation you'd use semantic-release --dry-run
          last_release_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Check for conventional commits since last release
          commits_since_release=$(git log ${last_release_tag}..HEAD --oneline)
          
          if echo "$commits_since_release" | grep -E "^[a-f0-9]+ (feat|fix|perf|BREAKING)"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=auto" >> $GITHUB_OUTPUT
            echo "Releasable commits found since $last_release_tag"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No releasable commits found"
          fi

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [check-release]
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install "3.11"

      - name: Install dependencies
        run: |
          npm ci
          uv sync --dev

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "conventionalcommits",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "docs", "release": false},
                  {"type": "style", "release": false},
                  {"type": "refactor", "release": "patch"},
                  {"type": "test", "release": false},
                  {"type": "build", "release": false},
                  {"type": "ci", "release": false},
                  {"type": "chore", "release": false},
                  {"type": "revert", "release": "patch"},
                  {"breaking": true, "release": "major"}
                ]
              }],
              ["@semantic-release/release-notes-generator", {
                "preset": "conventionalcommits",
                "presetConfig": {
                  "types": [
                    {"type": "feat", "section": "🚀 Features", "hidden": false},
                    {"type": "fix", "section": "🐛 Bug Fixes", "hidden": false},
                    {"type": "perf", "section": "⚡ Performance Improvements", "hidden": false},
                    {"type": "revert", "section": "⏪ Reverts", "hidden": false},
                    {"type": "docs", "section": "📚 Documentation", "hidden": false},
                    {"type": "style", "section": "💄 Styles", "hidden": true},
                    {"type": "chore", "section": "🔧 Miscellaneous Chores", "hidden": true},
                    {"type": "refactor", "section": "♻️ Code Refactoring", "hidden": false},
                    {"type": "test", "section": "✅ Tests", "hidden": true},
                    {"type": "build", "section": "🏗️ Build System", "hidden": true},
                    {"type": "ci", "section": "👷 CI/CD", "hidden": true}
                  ]
                }
              }],
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["@semantic-release/exec", {
                "prepareCmd": "npm version ${nextRelease.version} --no-git-tag-version && uv version ${nextRelease.version}",
                "publishCmd": "echo 'Version updated to ${nextRelease.version}'"
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md", "package.json", "package-lock.json", "pyproject.toml"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "successComment": "🎉 This ${issue.pull_request ? 'PR is included' : 'issue has been resolved'} in version [${nextRelease.version}](${releases.filter(release => release.name == nextRelease.version)[0].url}) 🎉",
                "labels": ["released"],
                "releasedLabels": ["released@${nextRelease.channel}"]
              }]
            ]
          }
          EOF

      - name: Run semantic release
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-release-assets:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: [semantic-release]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.new_release_git_tag }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install "3.11"

      - name: Install dependencies
        run: |
          npm ci
          uv sync

      - name: Build Electron app
        run: |
          npm run build
          npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Python package
        run: uv build

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-${{ needs.semantic-release.outputs.new_release_version }}
          path: |
            dist/
            build/
            release/
          retention-days: 90

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [semantic-release, build-release-assets]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize release assets
        run: |
          mkdir -p release-assets
          
          # Organize artifacts by platform
          for artifact_dir in artifacts/release-*; do
            if [ -d "$artifact_dir" ]; then
              platform=$(basename "$artifact_dir" | sed 's/release-\(.*\)-v.*/\1/')
              echo "Processing platform: $platform"
              
              # Copy Electron distributables
              if [ -d "$artifact_dir/release" ]; then
                cp -r "$artifact_dir/release"/* release-assets/ 2>/dev/null || true
              fi
              
              # Copy Python wheels (from Linux build only)
              if [ "$platform" = "ubuntu-latest" ] && [ -d "$artifact_dir/dist" ]; then
                cp -r "$artifact_dir/dist"/*.whl release-assets/ 2>/dev/null || true
              fi
            fi
          done
          
          ls -la release-assets/

      - name: Upload assets to GitHub release
        run: |
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Upload all release assets
          for asset in release-assets/*; do
            if [ -f "$asset" ]; then
              echo "Uploading $asset to release ${{ needs.semantic-release.outputs.new_release_git_tag }}"
              gh release upload ${{ needs.semantic-release.outputs.new_release_git_tag }} "$asset" --clobber
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [semantic-release, publish-release]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          cat > release-summary.md << EOF
          # 🚀 Release ${{ needs.semantic-release.outputs.new_release_version }} Published!
          
          ## What's New
          
          The latest version of Trader Ops Dashboard has been released with new features and improvements.
          
          ## 📦 Downloads
          
          - **Desktop Apps**: Available for Windows, macOS, and Linux
          - **Python Package**: Available on the releases page
          
          ## 🔗 Links
          
          - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.semantic-release.outputs.new_release_git_tag }})
          - [Full Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          
          ## 🚀 Installation
          
          ### Desktop App
          Download the appropriate installer for your platform from the [releases page](https://github.com/${{ github.repository }}/releases/latest).
          
          ### Development Setup
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd trader-ops
          ./scripts/setup_uv.sh
          npm run dev
          \`\`\`
          
          ## 📊 This Release Includes
          
          - Enhanced performance optimizations for trading operations
          - Improved real-time data handling
          - Better error handling and logging
          - Updated dependencies for security and performance
          
          Happy trading! 📈
          EOF
          
          echo "Release summary created successfully"

      - name: Create deployment issue for tracking
        run: |
          gh issue create \
            --title "🚀 Deployment: v${{ needs.semantic-release.outputs.new_release_version }}" \
            --body-file release-summary.md \
            --label "deployment,release" \
            --assignee "@me" || echo "Could not create issue"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}