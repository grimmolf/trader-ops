# TraderTerminal Production Compose Configuration
# Optimized for production deployment with security and performance settings
version: '3.8'

services:
  # Redis cache service
  redis:
    image: ghcr.io/grimmolf/traderterminal-redis:latest
    container_name: traderterminal-redis
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - traderterminal
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # DataHub backend service
  datahub:
    image: ghcr.io/grimmolf/traderterminal-datahub:latest
    container_name: traderterminal-datahub
    ports:
      - "8080:8080"
    volumes:
      - /etc/traderterminal:/etc/traderterminal:ro
      - datahub_data:/app/data
    environment:
      - REDIS_URL=redis://redis:6379
      - KAIROS_URL=http://kairos:8081
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - traderterminal
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Kairos automation service
  kairos:
    image: ghcr.io/grimmolf/traderterminal-kairos:latest
    container_name: traderterminal-kairos
    ports:
      - "127.0.0.1:8081:8081"  # Bind to localhost only
    volumes:
      - /etc/traderterminal:/etc/traderterminal:ro
      - kairos_data:/app/data
    environment:
      - DATAHUB_URL=http://datahub:8080
      - REDIS_URL=redis://redis:6379
      - HEADLESS_MODE=true
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    depends_on:
      datahub:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - traderterminal
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.2'

  # MongoDB for TradeNote
  tradenote-mongo:
    image: mongo:6.0
    container_name: traderterminal-tradenote-mongo
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only
    volumes:
      - tradenote_mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/tradenote_mongo_user
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/tradenote_mongo_password
      - MONGO_INITDB_DATABASE=tradenote
    secrets:
      - tradenote_mongo_user
      - tradenote_mongo_password
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - traderterminal
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.2'

  # TradeNote trade journal service
  tradenote:
    image: eleventrading/tradenote:latest
    container_name: traderterminal-tradenote
    ports:
      - "127.0.0.1:8082:8080"  # Bind to localhost only
    volumes:
      - tradenote_data:/app/data
    environment:
      - MONGO_URI_FILE=/run/secrets/tradenote_mongo_uri
      - TRADENOTE_DATABASE=tradenote
      - APP_ID_FILE=/run/secrets/tradenote_app_id
      - MASTER_KEY_FILE=/run/secrets/tradenote_master_key
      - TRADENOTE_PORT=8080
      - NODE_ENV=production
    secrets:
      - tradenote_mongo_uri
      - tradenote_app_id
      - tradenote_master_key
    depends_on:
      tradenote-mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - traderterminal
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.2'

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: traderterminal-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - prometheus_config:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    user: "1001:1001"
    restart: unless-stopped
    networks:
      - traderterminal
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

# Named volumes for persistent data
volumes:
  redis_data:
    driver: local
  datahub_data:
    driver: local
  kairos_data:
    driver: local
  tradenote_mongo_data:
    driver: local
  tradenote_data:
    driver: local
  prometheus_config:
    driver: local
  prometheus_data:
    driver: local

# Secrets for secure credential management
secrets:
  tradenote_mongo_user:
    file: /etc/traderterminal/secrets/tradenote_mongo_user.txt
  tradenote_mongo_password:
    file: /etc/traderterminal/secrets/tradenote_mongo_password.txt
  tradenote_mongo_uri:
    file: /etc/traderterminal/secrets/tradenote_mongo_uri.txt
  tradenote_app_id:
    file: /etc/traderterminal/secrets/tradenote_app_id.txt
  tradenote_master_key:
    file: /etc/traderterminal/secrets/tradenote_master_key.txt

# Secure network configuration
networks:
  traderterminal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"